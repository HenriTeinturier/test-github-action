name: Lint

on: push

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # Pour faire notre test on récupère le code
      - name: Checkout code
        uses: actions/checkout@v4

      # On installe node
      - name: Set up Node.js
        uses: actions/setup-node@v4

      # On installe les dépendances
      - name: Install dependencies
        run: npm install

      # # On exécute ESLint
      # - name: Run ESLint
      #   id: eslint
      #   # on lance le test lint
      #   run: npm run lint
      #   # On continue même si ESLint renvoie des erreurs
      #   continue-on-error: true

      # - name: Display ESLint errors
      #   # On ajoute des parametres file, line à notre warning
      #   # on pourrait utiliser des valeurs dynamiques pour file et line
      #   # Mais cela ferait des commandes bash compliquées
      #   # on met donc des statics pour notre exemple
      #   run: |
      #     echo "::group::ESLint Errors"
      #     echo "::warning file=src/App.tsx,line=6,title=titre::unused variable"
      #     echo "::endgroup::"

      # On exécute ESLint et on affiche les erreurs
      - name: Run ESLint and display errors
        id: eslint
        # On continue même si ESLint renvoie des erreurs
        continue-on-error: true
        run: |
          echo "::group::ESLint Output"
          # On lance ESLint une seule fois et on capture la sortie
          npm run lint 2>&1 | while IFS= read -r line; do
            # Afficher la ligne dans les logs
            echo "$line"
            # Créer une annotation si c'est une erreur ESLint
            if [[ $line =~ ^Error:\s*([0-9]+):([0-9]+)\s+(error|warning)\s+(.+)$ ]]; then
              line="${BASH_REMATCH[1]}"
              column="${BASH_REMATCH[2]}"
              type="${BASH_REMATCH[3]}"
              message="${BASH_REMATCH[4]}"
              echo "::warning file=src/App.tsx,line=$line,title=ESLint $type::$message"
            fi
          done
          echo "::endgroup::"
